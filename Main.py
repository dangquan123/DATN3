import pickleimport cv2import face_recognitionimport cvzoneimport numpy as npimport firebase_adminfrom firebase_admin import credentialsfrom firebase_admin import dbfrom firebase_admin import storagefrom datetime import datetime# from ultralytics import YOLOimport mathimport timefrom test import testimport util# sác xuất cậnconfidence = 0.6# kết nối với firebasecred = credentials.Certificate("serviceAccountKey.json")firebase_admin.initialize_app(cred,{    'databaseURL':'https://faceattendacerealtime-23cfc-default-rtdb.firebaseio.com/',    'storageBucket':'faceattendacerealtime-23cfc.appspot.com'})# tạo đối tượng để sử dụng kho lưu trữ trên firebasebucket = storage.bucket()# lấy hình ảnh từ cameracap = cv2.VideoCapture(0)cap.set(3, 1280)cap.set(4, 720)# lấy dữ liệu đã mã hóa từ fileprint("đang lấy dữ liệu mã hóa ...")file = open('EncodeFile.p', 'rb')encodeListKnownWithIds = pickle.load(file)file.close()encodeListKnown, studentIds = encodeListKnownWithIds# print(studentIds)print("đã lấy xong!")# hàm thêm vào file exceldef join(id):    print(f'\n{id}, {studentInfo["total_attendance"]}, {studentInfo["fist_attendance_time"]},{studentInfo["last_attendance_time"]}')    list_line = []    lines = []    with open('thamdu.csv', 'r+') as file:        for j in file.readlines():            lines.append(j)            entry = j.split(',')            list_line.append(entry[0])        if id not in list_line:            file.writelines(f'{id}, {studentInfo["total_attendance"]}, {studentInfo["fist_attendance_time"]},{studentInfo["last_attendance_time"]}')        else:            for i, line in enumerate(list_line):                if id == line:                    with open('thamdu.csv', 'w') as f:                        lines[i] = f'{id}, {studentInfo["total_attendance"]}, {studentInfo["fist_attendance_time"]}, {studentInfo["last_attendance_time"]}\n'                        f.writelines(lines)# tạo đối tượng phân biệt real fake đã# model = YOLO("best.pt")classNames = ["fake", "real"]fistTimeCount = time.time()while True:    success, img = cap.read()    # results = model(img, stream=True, verbose=False)    # for r in results:    #     boxes = r.boxes    #     for box in boxes:    #         # lấy thông tin vị trí khuôn mặt    #         x1, y1, x2, y2 = box.xyxy[0]    #         x1, y1, x2, y2 = int(x1), int(y1), int(x2), int(y2)    #         h, w = x2 - x1, y2 - y1    #         # sác xuất    #         conf = math.ceil((box.conf[0] * 100)) / 100    #         cls = int(box.cls[0])    #         if conf > confidence:    #             if classNames[cls] == 'fake':    #                 # phủ trắng các gương mặt fake    #                 matrix_white = np.full((w, h, 3), 255, dtype=np.uint8)    #                 img[y1:y1+w, x1:x1+h] = matrix_white    #    # label = test(    #     image_name= img,    #     model_dir='G:/DATN/face and real 1/Silent-Face-Anti-Spoofing-master/resources/anti_spoof_models',    #     device_id=0    # )        # x1, y1, x2,y2 =        # matrix_white = np.full((w, h, 3), 255, dtype=np.uint8)        # img[y1:y1+w, x1:x1+h] = matrix_white    faceCurFrame = face_recognition.face_locations(img)    for faceLoc1 in faceCurFrame:        y1, x2, y2, x1 = faceLoc1        img1 = img[y1:y2 , x1:x2]        img1 = cv2.resize(img1, (360, 480))        cv2.imshow("quan", img1)        label = test(            image_name=img1,            model_dir='G:/DATN/face and real 1/Silent-Face-Anti-Spoofing-master/resources/anti_spoof_models',            device_id=0)        if label != 1:            x1, y1, w, h = x1, y1, x2 - x1, y2 - y1            matrix_white = np.full((h, w, 3), 255, dtype=np.uint8)            img[y1:y2 , x1:x2] = matrix_white    imgS = cv2.resize(img, (0, 0), None, 0.25, 0.25)    imgS = cv2.cvtColor(imgS, cv2.COLOR_BGR2RGB)    faceCurFrame = face_recognition.face_locations(imgS)    encodeCurFrame = face_recognition.face_encodings(imgS, faceCurFrame)    listFaceDis = []    for encodeFace, faceLoc in zip(encodeCurFrame, faceCurFrame):        # biến matchs trả về danh sách true hoặc fales        matches = face_recognition.compare_faces(encodeListKnown, encodeFace)        # độ chênh lệch giữa 2 gương mặt        faceDis = face_recognition.face_distance(encodeListKnown, encodeFace)        # vị trí gương mặt có khả năng tương thích nhất trong kho dữ liệu        matchIndex = np.argmin(faceDis)        # giả trị tương thích tại vị trí đó        valueMatchIndex = np.amin(faceDis)        if valueMatchIndex < 0.5:            id = studentIds[matchIndex]            # lấy dữ liệu từ database về            studentInfo = db.reference(f'Students/{id}').get()            #gửi dữ liệu lên database            ref = db.reference(f'Students/{id}')            studentInfo['total_attendance'] += 1            ref.child("total_attendance").set(studentInfo['total_attendance'])            if studentInfo['total_attendance'] == 1:                fistTime = datetime.now()                fistTime = fistTime.strftime('%H:%M:%S %d/%m/%Y')                ref.child('fist_attendance_time').set(fistTime)            else:                lastTime = datetime.now()                lastTime = lastTime.strftime('%H:%M:%S %d/%m/%Y')                ref.child('last_attendance_time').set(lastTime)            join(id)        else:            id = "unknow"        y1, x2, y2, x1 = faceLoc        y1, x2, y2, x1 = y1 * 4, x2 * 4, y2 * 4, x1 * 4        bbox = x1, y1, x2 - x1, y2 - y1        imgBackGround = cvzone.cornerRect(img, bbox, rt=0)        cv2.putText(img, id, (x2, y2), cv2.FONT_HERSHEY_COMPLEX, 1, (255, 0, 0), 1)    cv2.imshow("DATN", img)    cv2.waitKey(1)    lastTimeCount = time.time()    deltaTime = int(lastTimeCount - fistTimeCount)    # sau một khoảng thời gian, đặt lại các thông số    if deltaTime > 60: #sau 60s        # Tải tệp lên Firebase Storage        bucket = storage.bucket()        blob = bucket.blob("file/thamdu.csv")        blob.upload_from_filename("thamdu.csv")        with open("thamdu.csv", "r") as f:            lines = f.readlines()            for line in lines:                if line == "\n":                    continue                idClear = line[0]                refclear = db.reference(f'Students/{idClear}')                refclear.child("total_attendance").set(0)                print(line[0])        with open("thamdu.csv", "w") as f:            f.write("")        fistTimeCount = time.time()cv2.destroyAllWindows()